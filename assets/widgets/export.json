{
  "alias": "export",
  "name": "Export",
  "descriptor": {
    "type": "timeseries",
    "sizeX": 3.5,
    "sizeY": 1,
    "resources": [
      {
        "url": "https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.15.1/xlsx.full.min.js"
      },
      {
        "url": "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/js/all.min.js"
      }
    ],
    "templateHtml": "<div layout=\"row\" layout-fill layout-align=\"center center\"  ng-click=\"showPopup($event)\">\n    <div id=\"export-button\" flex=\"100\" layout=\"row\" layout-align=\"center center\">\n        <i id=\"export-icon\" class=\"fas fa-cloud-download-alt\"></i>\n        <span id=\"export-label\">EXPORT</span>\n    </div>\n</div>\n\n<div class=\"md-dialog-container dialog-container\" id=\"myDialog\">\n    <md-dialog aria-label=\"Data Export Wizard\">\n        <md-toolbar>\n            <div class=\"md-toolbar-tools\">\n                <h2>Data Export Wizard</h2>\n                <span flex></span>\n                <md-button class=\"md-icon-button\" ng-click=\"cancel()\">\n                    <md-icon aria-label=\"Close dialog\">close</md-icon>\n                </md-button>\n            </div>\n        </md-toolbar>\n        <md-dialog-content>\n            <md-tabs md-center-tabs md-selected=\"selectedTab\" md-border-bottom md-no-ink-bar md-no-pagination md-no-select-click layout-fill style=\"min-height: 50vh\">\n                <md-tab label=\"1. Devices\" selectedIndex=\"0\">\n                    <md-content layout-fill layout=\"column\" layout-align=\"space-around none\" style=\"background-color: white\">\n                        \n                        <div layout=\"column\" layout-wrap layout-padding flex=\"\">\n                            <fieldset class=\"demo-fieldset\" style=\"height:100%\">\n                                <h3 class=\"md-title demo-legend\">Available devices</h3>\n                                <div layout=\"row\" layout-wrap layout-align=\"start start\" flex style=\"height:70%\">\n                                    <div flex-xs flex=\"50\">\n                                        <md-checkbox aria-label=\"Select All\" \n                                        ng-model=\"tab1.selectAllCheckBox\"\n                                        ng-click=\"selectAll(tab1.devices, 'tab1')\">\n                                            <span ng-if=\"!tab1.selectAllCheckBox\">\n                                                Select All\n                                            </span>\n                                            <span ng-if=\"tab1.selectAllCheckBox\">\n                                                Unselect All\n                                            </span>\n                                        </md-checkbox>\n                                    </div>\n                                    \n                                    <div flex=\"100\">\n                                        <div class=\"demo-select-all-checkboxes\" ng-repeat=\"dev in tab1.devices\" style=\"padding-left: 30px;\">\n                                            <md-checkbox ng-model=\"dev.selected\" aria-label=\"dev-checkbox\">\n                                                {{ dev.name }}\n                                            </md-checkbox>\n                                        </div>\n                                    </div>\n                                </div>\n                            </fieldset>\n                        </div>\n                        \n                    </md-content>\n                </md-tab>\n                \n                <md-tab label=\"2. Timeseries\" ng-disabled=\"tab2.disabled\">\n                    <md-content layout-fill layout=\"column\" layout-align=\"space-around none\" style=\"background-color: white\">\n                        \n                        <div layout=\"column\" layout-wrap layout-padding flex=\"\">\n                            <fieldset class=\"demo-fieldset\" style=\"height:100%\">\n                                <h3 class=\"md-title demo-legend\">Available timeseries</h3>\n                                <div layout=\"row\" layout-wrap layout-align=\"start start\" flex style=\"height:70%\">\n                                    <div flex-xs flex=\"50\">\n                                        <md-checkbox aria-label=\"Select All\" \n                                        ng-model=\"tab2.selectAllCheckBox\"\n                                        ng-click=\"selectAll(tab2.tsKeys, 'tab2')\">\n                                            <span ng-if=\"!tab2.selectAllCheckBox\">\n                                                Select All\n                                            </span>\n                                            <span ng-if=\"tab2.selectAllCheckBox\">\n                                                Unselect All\n                                            </span>\n                                        </md-checkbox>\n                                    </div>\n                                    <div flex=\"100\">\n                                        <div class=\"demo-select-all-checkboxes\" ng-repeat=\"ts in tab2.tsKeys\" style=\"padding-left: 30px;\">\n                                            <md-checkbox ng-model=\"ts.selected\" aria-label=\"dev-checkbox\">\n                                                {{ ts.device }}: {{ ts.label }}\n                                            </md-checkbox>\n                                        </div>\n                                    </div>\n                                </div>\n                            </fieldset>\n                        </div>\n                        \n                    </md-content>\n                </md-tab>\n                \n                <md-tab label=\"3. Timepicker\" ng-disabled=\"tab3.disabled\">\n                    <md-content layout-fill layout=\"column\" layout-align=\"space-around none\" style=\"background-color: white\">\n                        \n                        <div layout-wrap layout-padding flex=\"\">\n                            <h3 class=\"md-title demo-legend\">Report time range</h3>\n                            \n                            <div layout=\"row\" layout-align=\"space-around center\">\n                                <div layout=\"column\" layout-align=\"space-between start\">\n                                    <md-checkbox ng-model=\"tab3.left\" ng-click=\"tab3.toggle()\">\n                                        Request for a specific month\n                                    </md-checkbox>\n                                    <md-input-container style=\"height: 2em\">\n                                        <label>Year</label>\n                                        <md-select ng-model=\"tab3.dateYear\" ng-change=\"tab3.updateMonths()\" ng-disabled=\"!tab3.left\">\n                                            <md-option ng-repeat=\"year in tab3.years\" ng-value=\"year\">{{year}}</md-option>\n                                        </md-select>\n                                    </md-input-container>\n                                    <md-input-container style=\"height: 2em\">\n                                        <label>Month</label>\n                                        <md-select ng-model=\"tab3.dateMonth\" ng-disabled=\"!tab3.left\">\n                                            <md-option ng-repeat=\"month in tab3.months\" ng-value=\"month.value\">\n                                                {{month.label}}\n                                            </md-option>\n                                        </md-select>\n                                    </md-input-container>\n                                </div>\n                                \n                                <div layout=\"column\" layout-align=\"space-between start\">\n                                    <md-checkbox ng-model=\"tab3.right\" ng-disabled=\"true\">\n                                        ...or a custom date range\n                                    </md-checkbox>\n                                    <md-input-container style=\"height: 2em\">\n                                        <label>From</label>\n                                        <md-datepicker ng-model=\"tab3.fromDate\" ng-disabled=\"tab3.left\"></md-datepicker>\n                                    </md-input-container>\n                                    <md-input-container style=\"height: 2em\">\n                                        <label>To</label>\n                                        <md-datepicker ng-model=\"tab3.toDate\" ng-disabled=\"tab3.left\"></md-datepicker>\n                                    </md-input-container>\n                                </div>\n                            </div>\n                            \n                        </div>\n                        \n                    </md-content>\n                </md-tab>\n                \n                <md-tab label=\"4. File Format\" ng-disabled=\"tab4.disabled\">\n                    <md-content layout-fill layout=\"column\" layout-align=\"space-around none\" style=\"background-color: white\">\n                        \n                        <div layout-wrap layout-padding flex=\"50\">\n                            <h3 class=\"md-title demo-legend\">Supported file formats</h3>\n                            <div layout=\"row\" layout-padding>\n                                <md-input-container>\n                                    <label style=\"padding-left: 12px;\">Export as</label>\n                                    <md-select ng-model=\"tab4.format\">\n                                        <md-option ng-repeat=\"format in tab4.formats\" ng-value=\"format\">{{format}}</md-option>\n                                    </md-select>\n                                </md-input-container>\n                                <div layout=\"row\" style=\"font-weight: 300; font-size: 0.75em\" ng-if=\"tab3.bigDataset && tab4.format === 'XLSX'\">\n                                    <span style=\"margin-right: 4px\">*</span>\n                                    <span>\n                                        Your dataset contains >1 million records. Due to MS Excel limitations, it will be clipped. Consider exporting in CSV format.\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n                        \n                        <div layout=\"column\" layout-wrap layout-align=\"space-around center\" flex=\"50\">\n                            <md-progress-circular md-mode=\"indeterminate\" ng-disabled=\"tab4.isReady\"></md-progress-circular>\n                            <span ng-if=\"!tab4.isReady\">Please wait as your data download is getting ready</span>\n                        </div>\n                        \n                    </md-content>\n                </md-tab>\n                \n            </md-tabs>\n        </md-dialog-content> \n        <md-dialog-actions>\n            <md-button ng-click=\"prevTab()\" class=\"md-primary\" ng-if=\"selectedTab>0\">{{ prevTabBtnLabel}}</md-button>\n            <md-button ng-click=\"nextTab()\" class=\"md-primary md-raised\" ng-disabled=\"!tab4.isReady\">{{ nextTabBtnLabel}}</md-button>\n        </md-dialog-actions>\n    </md-dialog>\n</div>",
    "templateCss": "#export-icon {\n    margin-right: 8px;\n}\n\n#export-button {\n    font-size: 0.9em;\n}\n\n#myDialog {\n    visibility: hidden;\n    height: 100%;\n}\n\n.tabsdemoCenterTabs md-tab-item {\n    min-width: 72px; \n}\n\n@media (min-width: 960px) {\n    .tabsdemoCenterTabs md-tab-item {\n        min-width: 160px; \n    } \n}\n",
    "controllerScript": "const fetchTelemetry = ({ JWT, entityId, startTs, endTs, keys }) => {\n    const encodedKeys = encodeURIComponent(keys.join(\",\"));\n    return $.get({\n        url: `/api/plugins/telemetry/DEVICE/${entityId}/values/timeseries?keys=${encodedKeys}&startTs=${startTs}&endTs=${endTs}&limit=50000000&agg=NONE`,\n        headers: {\n            \"X-Authorization\": `Bearer  ${JWT}`\n        },\n        contentType: 'application/json',\n        // timeout: 5000,\n    })\n        .fail(function(err, status) {\n            console.error(JSON.stringify(\n                err));\n            const toast = self.ctx.$scope.$injector.get('toast');\n            toast.showError(err.responseText, angular.element(document.body), 'bottom left');\n            setTimeout(function() {toast.hide()}, 3000);\n        });\n        // .done(function(response) {\n        //     console.log(response);\n        // });\n};\n\nconst exportData = (title, data) => {\n    let wb = XLSX.utils.book_new();\n    const ws = XLSX.utils.aoa_to_sheet(data);\n    XLSX.utils.book_append_sheet(wb, ws, \"Sheet1\");\n    XLSX.writeFile(wb, title);\n    self.ctx.$scope.tab4.isReady = true;\n};\n\nconst round = (n, d) => {\n    return Number(Math.round(n + 'e' + d) + 'e-' + d);\n};\n\n\nconst formatData = (deviceData, selectedKeys, selectedKeyLabels) => {\n    console.log(deviceData, selectedKeys, selectedKeyLabels);\n    const headers = [\"timestamp\", \"device\", \"key\", \"value\"];\n    const formattedData = deviceData.reduce((acc, dev) => {\n        let keys = Object.keys(dev.data);\n        if (keys.length) {\n            keys.forEach((k, i) => {\n                if (selectedKeys.includes(k)) {\n                    const data = dev.data[k].map(d => {\n                        return [\n                            d.ts.toString(),\n                            dev.device,\n                            selectedKeyLabels[i],\n                            round(d.value, 3)\n                        ];\n                    });\n                    acc = acc.concat(data);\n                }\n            });\n        }\n        else {\n            console.warn(`Dev ${dev.device} has no data for the specified period!`);\n        }\n        return acc;\n    }, []);\n    formattedData.unshift(headers);\n    return formattedData;\n};\n\nconst getSelected = (list) => {\n    const selected = list.reduce((acc, d) => {\n        if (d.selected) {\n            acc.push(d.name);\n        }\n        return acc;\n    }, []);\n    return selected;\n};\n\nconst getTsOfSelectedDevices = () => {\n    const selectedDevices = getSelected(self.ctx.$scope.tab1.devices);\n    \n    const tsKeys = self.ctx.$scope.data\n        .reduce((acc, x) => {\n            if (selectedDevices.includes(x.datasource.name)) {\n                const tsKey = x.dataKey.name;\n                const tsLabel = x.dataKey.label;\n                acc.push({\n                    name: tsKey,\n                    device: x.datasource.name,\n                    label: tsLabel,\n                    selected: true\n                });\n            }\n            return acc;\n        }, []);  \n    return tsKeys;\n};\n\nself.onInit = function() {\n    const userService = self.ctx.$scope.$injector.get('userService');\n    const $mdDialog = self.ctx.$scope.$injector.get('$mdDialog');\n    // const $mdDateLocaleProvider = self.ctx.$scope.$injector.get('$mdDateLocaleProvider');\n    \n    // $mdDateLocaleProvider.formatDate = function(date) {\n    //     return date ? moment(date).format('M/D') : '';\n    // };\n    \n    const deviceNamesList = self.ctx.defaultSubscription.data\n        .map(d => d.datasource.name);\n        \n    const devices = Array.from(new Set(deviceNamesList)).map(name => {\n        return {\n            name: name,\n            selected: true\n        };\n    });\n    \n    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    \n    // $('md-tabs > md-tabs-wrapper md-tab[disabled]').attr('style', 'background-color: #f00 !important;');\n    \n    const $scope = self.ctx.$scope;\n    $scope.selectedTab = 0;\n    $scope.prevTabBtnLabel = \"Previous\";\n    $scope.nextTabBtnLabel = \"Next\";\n    $scope.data = self.ctx.defaultSubscription.data;\n    $scope.showPopup = (ev) => {\n        $scope.selectedTab = 0;\n        $scope.nextTabBtnLabel = \"Next\";\n        $mdDialog.show({\n            contentElement: '#myDialog',\n            parent: angular.element(document.body),\n            targetEvent: ev,\n            clickOutsideToClose: true\n        });\n    };\n    \n    $scope.cancel = () => $mdDialog.cancel();\n    \n    $scope.tab1 = {\n        selectAllCheckBox: true,\n        devices: devices\n    };\n    \n    $scope.tab2 = {\n        selectAllCheckBox: true,\n        disabled: true,\n        tsKeys: []\n    };\n    \n    $scope.tab3 = {\n        bigDataset: false,\n        years: [moment().subtract(1, 'year').year(), moment().year()],\n        months: [...Array(moment().month() + 1).keys()]\n            .map(x => {\n                return {\n                    value: x+1,\n                    label: monthNames[x]\n                };\n            }),\n        dateYear: moment().year(),\n        dateMonth: moment().month()+1,\n        left: true,\n        right: false,\n        fromDate: moment().startOf('month').toDate(),\n        toDate: moment().toDate(),\n        toggle: function() {\n            $scope.tab3.right = !$scope.tab3.right;\n        },\n        updateMonths: function() {\n            const selectedYear = $scope.tab3.dateYear;\n            if (moment().year() > selectedYear) {\n                $scope.tab3.months = monthNames\n                    .map((x, i) => {\n                        return {\n                            value: i+1,\n                            label: x\n                        };\n                    });\n            }\n        }\n    };\n    \n    $scope.tab4 = {\n        disabled: true,\n        formats: [\"CSV\", \"XLSX\"],\n        format: \"CSV\",\n        isReady: true\n    };\n    \n    $scope.nextTab = function() {\n        const currentTab = $scope.selectedTab;\n        switch (currentTab) {\n            // devices tab\n            case 0:\n                $scope.tab2.tsKeys = getTsOfSelectedDevices();\n                $scope.tab2.disabled = false;\n                break;\n                \n            // timeseries tab\n            case 1:\n                $scope.tab3.disabled = false;\n                break;\n                \n            // timepicker tab\n            case 2:\n                $scope.tab4.disabled = false;\n                break;\n                \n            // format tab    \n            default:\n                const $q = self.ctx.$scope.$injector.get('$q');\n                const selectedDevices = getSelected(self.ctx.$scope.tab1.devices);\n                const selectedKeys = getSelected($scope.tab2.tsKeys);\n                const selectedKeyLabels = $scope.tab2.tsKeys.reduce((acc, d) => {\n                    if (d.selected) {\n                        acc.push(d.label);\n                    }\n                    return acc;\n                }, []);\n                const deviceInfo = self.ctx.datasources\n                    .filter(d => selectedDevices.includes(d.entityName));\n                    \n                var startTs, endTs;\n                if ($scope.tab3.left) {\n                    const date = moment(`${$scope.tab3.dateYear}-${$scope.tab3.dateMonth}`, 'YYYY-MM');\n                    startTs = date.startOf('month').valueOf();\n                    endTs = date.endOf('month').valueOf();\n                } else {\n                    startTs = moment($scope.tab3.fromDate).startOf('day').valueOf();\n                    endTs = moment($scope.tab3.toDate).endOf('day').valueOf();\n                }\n                \n                const dataP = deviceInfo.map(d => {\n                    return fetchTelemetry({\n                        entityId: d.entityId,\n                        JWT: userService.getJwtToken(),\n                        keys: Array.from(new Set(selectedKeys)),\n                        startTs: startTs,\n                        endTs: endTs\n                    }).then(c => {\n                        return {\n                            device: d.entityName,\n                            data: c\n                        };\n                    });\n                });\n                // console.log('Selected keys', Array.from(new Set(selectedKeys)));\n                // console.log('Selected devices', deviceInfo);\n                const format = $scope.tab4.format.toLowerCase();\n                const range = `${moment(startTs).format(\"YYYY_MM_DD\")}-${moment(endTs).format(\"YYYY_MM_DD\")}`;\n                const title = `export_${range}.${format}`;\n                $scope.tab4.isReady = false;\n                return $q.all(dataP).then(deviceData => {\n                    const formattedData = formatData(deviceData, selectedKeys, selectedKeyLabels);\n                    if (formattedData.length > 999999) {\n                        $scope.tab3.bigDataset = true;\n                    } \n                    return exportData(title, formattedData);\n                });\n        }\n        $scope.selectedTab = (currentTab + 1) % 4;\n    };\n    \n    $scope.prevTab = function() {\n        const currentTab = $scope.selectedTab;\n        $scope.selectedTab = (currentTab - 1) % 4;\n    };\n    \n    $scope.selectAll = function(elems, tab) {\n        const logicVal = (elems.every(d => d.selected)) ?\n            false : true;\n        elems.forEach(d => d.selected = logicVal);\n        $scope[tab].selectAllCheckBox = !logicVal;\n    };\n    \n    $scope.$watch('selectedTab', function(newVal, oldVal) {\n        if (newVal === 3) {\n            $scope.nextTabBtnLabel = \"Download\";\n        }\n        else {\n            $scope.nextTabBtnLabel = \"Next\";\n        }\n    });\n};\n\nself.onDataUpdated = function() {\n\n};\n\nself.onResize = function() {\n    \n};",
    "settingsSchema": "{}",
    "dataKeySettingsSchema": "{}",
    "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"First\",\"color\":\"#2196f3\",\"settings\":{\"showLines\":true,\"fillLines\":true,\"showPoints\":false},\"_hash\":0.8587686344902596,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Second\",\"color\":\"#ffc107\",\"settings\":{\"showLines\":true,\"fillLines\":false,\"showPoints\":false},\"_hash\":0.12775350966079668,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Cos\",\"color\":\"#f44336\",\"settings\":{},\"_hash\":0.24505484152989387,\"funcBody\":\"return Math.round(1000*Math.cos(time/5000));\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#ffc107\",\"settings\":{},\"_hash\":0.3345196917626052,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random 2\",\"color\":\"#607d8b\",\"settings\":{},\"_hash\":0.46269070733358886,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random 3\",\"color\":\"#9c27b0\",\"settings\":{},\"_hash\":0.9122349923444181,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random 4\",\"color\":\"#8bc34a\",\"settings\":{},\"_hash\":0.32095217411843935,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"#9d1f63\",\"color\":\"rgb(255, 255, 255)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Export\",\"dropShadow\":true,\"enableFullscreen\":false,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"mobileHeight\":null,\"showTitleIcon\":false,\"titleIcon\":\"more_horiz\",\"iconColor\":\"rgba(0, 0, 0, 0.87)\",\"iconSize\":\"24px\",\"titleTooltip\":\"\",\"widgetStyle\":{},\"useDashboardTimewindow\":true,\"displayTimewindow\":true,\"showLegend\":false,\"actions\":{}}"
  }
}