{
  "alias": "import",
  "name": "Import",
  "descriptor": {
    "type": "static",
    "sizeX": 3.5,
    "sizeY": 1,
    "resources": [
      {
        "url": "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/js/all.min.js"
      }
    ],
    "templateHtml": "<div layout=\"row\" layout-fill layout-align=\"center center\"  ng-click=\"showPopup($event)\">\n    <div id=\"import-button\" flex=\"100\" layout=\"row\" layout-align=\"center center\">\n        <i id=\"import-icon\" class=\"fas fa-cloud-upload-alt\"></i>\n        <span id=\"import-label\">IMPORT</span>\n    </div>\n</div>\n\n<div class=\"md-dialog-container dialog-container\" id=\"myImportDialog\">\n    <md-dialog aria-label=\"Data Import Wizard\">\n        <md-toolbar>\n            <div class=\"md-toolbar-tools\">\n                <h2>Data Import Wizard</h2>\n                <span flex></span>\n                <md-button class=\"md-icon-button\" ng-click=\"cancel()\">\n                    <md-icon aria-label=\"Close dialog\">close</md-icon>\n                </md-button>\n            </div>\n        </md-toolbar>\n        <md-dialog-content>\n            <md-tabs md-center-tabs md-selected=\"selectedTab\" md-border-bottom md-no-ink-bar md-no-pagination md-no-select-click layout-fill style=\"min-height: 50vh\">\n                <md-tab label=\"1. File\">\n                    <md-content layout-fill layout=\"column\" layout-align=\"space-around none\" style=\"background-color: white\">\n                        \n                        <div layout=\"column\" layout-wrap layout-padding flex=\"\">\n                            <fieldset class=\"demo-fieldset\" style=\"height:100%\">\n                                <h3 class=\"md-title demo-legend\">Import file</h3>\n                                <div layout=\"column\" layout-padding flow-init=\"{singleFile: true}\" flow-files-submitted=\"$flow.upload()\" flow-file-success=\"fileAdded( $file, $event, $flow )\">\n                                    <div flex=\"100\">\n                                        The file submitted should be a Comma Seperated Values file with '\\n' (or '\\r\\n') characters as new line feeds and no commas included in any string.\n                                    </div>\n                                    <div flex=\"100\">\n                                        At least 4 columns must be present: timestamp,device,key,value\n                                    </div>\n                                    <div class=\"alert tb-flow-drop\" flow-drop>\n                                        <label for=\"file_input\">Drop a CSV file or click to select a file to upload.</label>\n                                        <input id=\"file_input\" class=\"file-input\" flow-btn flow-attrs=\"{accept:'.csv,application/csv,text/csv'}\"/>\n                                    </div>\n                                    \n                                    <div ng-show=\"!tab1.fileSubmitted\">No file selected</div>\n                                    <div ng-show=\"tab1.fileSubmitted\">{{ tab1.fileName }}</div>\n                                    \n                                </div>\n                            </fieldset>\n                        </div>\n                        \n                    </md-content>\n                </md-tab>\n                \n                <md-tab label=\"2. Devices\" ng-disabled=\"tab2.disabled\">\n                    <md-content layout-fill layout=\"column\" layout-align=\"space-around none\" style=\"background-color: white\">\n                        \n                        <div layout=\"column\" layout-wrap layout-padding flex=\"\">\n                            <fieldset class=\"demo-fieldset\" style=\"height:100%\">\n                                <h3 class=\"md-title demo-legend\">Recognized devices</h3>\n                                <div layout=\"row\" layout-wrap layout-padding layout-align=\"start start\" flex style=\"height:70%\">\n                                    <div flex=\"100\">\n                                        Please match the recognized devices with some of the devices owned by your tenant below.\n                                    </div>\n                                    \n                                    <div flex=\"100\">\n                                        <div ng-repeat=\"ts in tab2.devices\" layout=\"row\" layout-align=\"space-between center\">\n                                            <span>{{ts.label}}</span>\n                                            <md-autocomplete md-selected-item=\"ts.device\" md-search-text=\"ts.searchText\" md-items=\"item in tab2.query(ts.searchText)\" md-item-text=\"item.name\" md-min-length=\"0\" md-selected-item-change=\"allMatched()\" placeholder=\"Select a device\" md-require-match style=\"width: 50%;\">\n                                                <md-item-template>\n                                                    <span md-highlight-text=\"ts.searchText\">{{item.name}}</span>\n                                                </md-item-template>\n                                                <md-not-found>\n                                                    No matches found.\n                                                </md-not-found>\n                                            </md-autocomplete>\n                                        </div>\n                                    </div>\n                                </div>\n                            </fieldset>\n                        </div>\n                        \n                    </md-content>\n                </md-tab>\n                \n                <md-tab label=\"3. Timeseries\" ng-disabled=\"tab3.disabled\">\n                    <md-content layout-fill layout=\"column\" layout-align=\"space-around none\" style=\"background-color: white\">\n                        \n                        <div layout=\"column\" layout-wrap layout-padding flex=\"\">\n                            <fieldset class=\"demo-fieldset\" style=\"height:100%\">\n                                <h3 class=\"md-title demo-legend\">Recognized timeseries</h3>\n                                <div layout=\"row\" layout-wrap layout-align=\"start start\" flex style=\"height:70%\">\n                                    <div flex=\"100\">\n                                        Please define the data type for each of the following timeseries.\n                                    </div>\n                                    <div ng-if=\"tab3.onlyDeletes\" layout=\"column\" layout-wrap layout-align=\"space-around center\" flex=\"100\">\n                                        <p>\n                                            <b>No timeseries detected</b>\n                                        </p>\n                                    </div>\n                                    <div flex=\"100\">\n                                        <div ng-repeat=\"ts in tab3.timeseries\" layout=\"row\" layout-align=\"space-between center\">\n                                            <span>{{ts.label}}</span>\n                                            <md-input-container>\n                                                <label>Type</label>\n                                                <md-select ng-model=\"ts.type\">\n                                                    <md-option value=\"long\">Long</md-option>\n                                                    <md-option value=\"double\">Double</md-option>\n                                                    <md-option value=\"boolean\">Boolean</md-option>\n                                                    <md-option value=\"string\">String</md-option>\n                                                </md-select>\n                                            </md-input-container>\n                                        </div>\n                                    </div>\n                                </div>\n                            </fieldset>\n                        </div>\n                        \n                    </md-content>\n                </md-tab>\n                \n                <md-tab label=\"4. Update\" ng-disabled=\"tab4.disabled\">\n                    <md-content layout-fill layout=\"column\" layout-align=\"space-around none\" style=\"background-color: white\">\n                        \n                        <div layout-wrap layout-padding flex=\"50\">\n                            <h3 class=\"md-title demo-legend\">Review and import</h3>\n                            <div layout=\"row\" layout-wrap layout-align=\"start start\" flex style=\"height:70%\">\n                                <div flex=\"100\">\n                                    Those actions will affect {{tab2.devices.length}} devices. They will: \n                                </div>\n                                <md-list flex=\"100\">\n                                    <md-list-item>\n                                        - Delete {{tab4.deletes.length}} measurements\n                                        &nbsp;\n                                        <i class=\"fas fa-check\" ng-if=\"tab4.deletesDone\"></i>\n                                    </md-list-item>\n                                    <md-list-item>\n                                        - Update {{tab4.updates}} measurements ({{tab4.timeseries}} timeseries)\n                                        &nbsp;\n                                        <i class=\"fas fa-check\" ng-if=\"tab4.updatesDone\"></i>\n                                    </md-list-item>\n                                </md-list>\n                            </div>\n                        </div>\n                        \n                        <div layout=\"column\" layout-wrap layout-align=\"space-around center\" flex=\"50\">\n                            <md-progress-circular md-mode=\"indeterminate\" ng-disabled=\"tab4.isReady\"></md-progress-circular>\n                            <span ng-if=\"!tab4.isReady\">Please wait</span>\n                        </div>\n                        \n                    </md-content>\n                </md-tab>\n                \n            </md-tabs>\n        </md-dialog-content> \n        <md-dialog-actions>\n            <md-button ng-click=\"prevTab()\" class=\"md-primary\" ng-if=\"selectedTab>0\">{{ prevTabBtnLabel}}</md-button>\n            <md-button ng-click=\"nextTab()\" class=\"md-primary md-raised\" ng-disabled=\"!nextTabBtnActive\">{{ nextTabBtnLabel}}</md-button>\n        </md-dialog-actions>\n    </md-dialog>\n</div>",
    "templateCss": "#import-icon {\n    margin-right: 8px;\n}\n\n#import-button {\n    font-size: 0.9em;\n}\n\n#myImportDialog {\n    visibility: hidden;\n    height: 100%;\n}\n\n.tabsdemoCenterTabs md-tab-item {\n    min-width: 72px; \n}\n\n@media (min-width: 960px) {\n    .tabsdemoCenterTabs md-tab-item {\n        min-width: 160px; \n    } \n}\n",
    "controllerScript": "const uploadTelemetry = (token, data) => {\n    const $q = self.ctx.$scope.$injector.get('$q');\n    const deferred = $q.defer();\n    $.ajax({\n        type: 'POST',\n        url: `/api/v1/${token}/telemetry`,\n        contentType: 'application/json',\n        dataType: \"json\",\n        data: JSON.stringify(data)\n    })\n    .fail(function(err, status) {\n        if (err.status !== 200) {\n            console.error(JSON.stringify(err));\n            show(err.responseText);\n            deferred.reject();\n        }\n        deferred.resolve();\n    });\n    return deferred.promise;\n};\n\nconst deleteTelemetry = (JWT, id, key, ts) => {\n    return $.ajax({\n        type: 'DELETE',\n        url: `/api/plugins/telemetry/DEVICE/${id}/timeseries/delete?rewriteLatestIfDeleted=true&keys=${encodeURIComponent(key)}&startTs=${ts}&endTs=${ts}`,\n        headers: {\n            \"X-Authorization\": `Bearer  ${JWT}`\n        },\n        contentType: 'application/json'\n    })\n    .fail(function(err, status) {\n        console.error(JSON.stringify(err));\n        showError(err.responseText);\n    });\n};\n\nconst tenantDevices = (JWT, query = '') => {\n    return $.get({\n        url: `/api/tenant/devices?limit=50&textSearch=${query}`,\n        headers: {\n            \"X-Authorization\": `Bearer  ${JWT}`\n        },\n        contentType: 'application/json'\n    })\n        .then(response => {\n            self.ctx.$scope.tab2.allDevices = response.data;\n            return response.data;\n        });\n};\n\nconst deviceCredentials = (JWT, id) => {\n    return $.get({\n        url: `/api/device/${id}/credentials`,\n        headers: {\n            \"X-Authorization\": `Bearer  ${JWT}`\n        },\n        contentType: 'application/json'\n    })\n        .then(response => {\n            return response.credentialsId;\n        });\n};\n\n\nconst cast = (value, type) => {\n    switch (type) {\n        case 'long':\n            return parseInt(value);\n        case 'double':\n            return parseFloat(value);\n        case 'boolean':\n            return Boolean(value);\n        default:\n            return value;\n    }\n};\n\nconst showError = (msg) => {\n    const toast = self.ctx.$scope.$injector.get('toast');\n    toast.showError(msg, angular.element(document.body), 'bottom left');\n    setTimeout(function() {toast.hide()}, 3000);\n    console.error(msg);\n};\n\nconst parseCSV = (file) => {\n    const [ headerLine, ...lines ] = file.split(/\\r?\\n/);\n    const headers = headerLine.split(',');\n    if (!headers || !headers.length || !headers[headers.length - 1].length) {\n        showError('No headers specified!');\n        return;\n    }\n    if (!lines || !lines.length || (lines.length === 1 && !lines[lines.length - 1].length)) {\n        showError('No timeseries in this file!');\n        return;\n    }\n    const content = lines[lines.length - 1].length === 0 ? \n                        lines.slice(0, -1) :\n                        lines;\n    \n    const index = ['timestamp', 'device', 'key', 'value'].reduce( (acc, key) => {\n        acc[key] = headers.findIndex(x => x === key);\n        return acc;\n    }, {});\n    \n    let timeseries = new Set();\n    let deletes = [];\n    const data = content.reduce( (acc, line) => {\n        const data = line.split(',');\n        const device = data[index.device];\n        const ts = data[index.timestamp];\n        const key = data[index.key];\n        const value = data[index.value];\n        \n        if (value === '') {\n            deletes.push({\n                key,\n                label: device,\n                ts: parseInt(ts)\n            });\n            return acc;\n        }\n        \n        timeseries.add(key);\n        \n        if (!acc[device]) {\n            acc[device] = {};\n        }\n        \n        if (!acc[device][ts]) {\n            acc[device][ts] = {\n                ts: parseInt(ts),\n                values: {\n                    [key]: value\n                }\n            };\n        } else {\n            const prev = acc[device][ts].values;\n            acc[device][ts] = {\n                ts: parseInt(ts),\n                values: Object.assign(prev, { [key]: value })\n            };\n        }\n        return acc;\n    }, {});\n    return {\n        data,\n        deletes,\n        size: content.length,\n        devices: Array.from(new Set(Object.keys(data).concat(deletes.map(d => d.label)))),\n        timeseries: Array.from(timeseries)\n    };\n};\n\nself.onInit = function() {\n    const userService = self.ctx.$scope.$injector.get('userService');\n    const $mdDialog = self.ctx.$scope.$injector.get('$mdDialog');\n    const $q = self.ctx.$scope.$injector.get('$q');\n    \n    const $scope = self.ctx.$scope;\n    $scope.selectedTab = 0;\n    $scope.prevTabBtnLabel = \"Previous\";\n    $scope.nextTabBtnLabel = \"Next\";\n    $scope.nextTabBtnActive = false;\n    \n    $scope.fileAdded = (file, ev, $flow) => {\n        const reader = new FileReader();  \n        reader.onload = () => {\n            $scope.tab1.fileContent = reader.result;\n            $scope.tab1.fileName = file.name;\n            $scope.tab1.fileSubmitted = true;\n            $scope.nextTabBtnActive = true;\n            $scope.$apply();\n            $flow.cancel();\n        };\n        reader.readAsText(file.file);\n    };\n    \n    $scope.showPopup = (ev) => {\n        $scope.selectedTab = 0;\n        $scope.nextTabBtnLabel = \"Next\";\n        $mdDialog.show({\n            contentElement: '#myImportDialog',\n            parent: angular.element(document.body),\n            targetEvent: ev,\n            clickOutsideToClose: false\n        });\n    };\n    \n    $scope.cancel = () => {\n        $mdDialog.cancel();\n        self.onInit();\n    };\n    \n    $scope.tab1 = {\n        fileContent: [],\n        fileSubmitted: false,\n        fileName: \"\",\n        data: {}\n    };\n    \n    $scope.tab2 = {\n        disabled: true,\n        allDevices: [],\n        query: (searchText) => $scope.tab2.allDevices.filter(d => d.name.toLowerCase().includes(searchText.toLowerCase())),\n        devices: []\n    };\n    \n    $scope.tab3 = {\n        disabled: true,\n        timeseries: [],\n        onlyDeletes: false\n    };\n    \n    $scope.tab4 = {\n        disabled: true,\n        isReady: true,\n        deletesDone: false,\n        updatesDone: false\n    };\n    \n    $scope.nextTab = function() {\n        const currentTab = $scope.selectedTab;\n        switch (currentTab) {\n            // file tab\n            case 0:\n                const res = parseCSV($scope.tab1.fileContent);\n                if (!res) return;\n                const {data, devices, timeseries, deletes, size} = res;\n                $scope.tab1.data = data;\n                $scope.tab2.devices = devices.map(d => {\n                    return {\n                        label: d,\n                        searchText: \"\",\n                        token: undefined\n                    };\n                });\n                $scope.tab3.timeseries = timeseries.map(t => {\n                    return {\n                        label: t,\n                        type: 'double'\n                    };\n                });\n                $scope.tab4.deletes = deletes;\n                $scope.tab4.updates = size - deletes.length;\n                $scope.tab2.disabled = false;\n                $scope.nextTabBtnActive = false;\n                break;\n                \n            // devices tab\n            case 1:\n                const notMatched = $scope.tab2.devices.some(d => !d.device);\n                if (notMatched) return;\n                \n                const tokensP = $scope.tab2.devices.map(d => deviceCredentials(userService.getJwtToken(), d.device.id.id));\n                \n                Promise.all(tokensP).then(tokens => {\n                    $scope.tab2.devices = $scope.tab2.devices.map( (d, i) => {\n                        d.token = tokens[i];\n                        return d;\n                    });\n                    \n                    $scope.tab4.index = $scope.tab2.devices.reduce( (acc, d) => {\n                        acc[d.label] = {\n                           id: d.device.id.id,\n                           name: d.device.name,\n                           token: d.token\n                        };\n                        return acc;\n                    }, {});\n                });\n                \n                // only deletes detected\n                if (!$scope.tab3.timeseries.length) {\n                    $scope.tab3.onlyDeletes = true;\n                }\n                $scope.tab3.disabled = false;\n                break;\n                \n            // timeseries tab\n            case 2:\n                if ($scope.tab3.onlyDeletes) {\n                    $scope.tab4.telemetry = [];\n                    $scope.tab4.timeseries = 0;\n                    break;\n                }\n                \n                const tsTypeMap = $scope.tab3.timeseries.reduce( (acc, x) => {\n                    acc[x.label] = x.type;\n                    return acc;\n                }, {});\n                const telemetry = $scope.tab2.devices.reduce( (acc, d) => {\n                    const dev = $scope.tab1.data[d.label];\n                    const data = Object.keys(dev).map(ts => {\n                        const values = Object.keys(dev[ts].values).reduce( (obj, k) => {\n                                obj[k] = cast(dev[ts].values[k], tsTypeMap[k]);\n                                return obj;\n                            }, {});\n                        return {\n                            ts: dev[ts].ts,\n                            values \n                        };\n                    });\n                    acc.push({\n                        data,\n                        ...d\n                    });\n                    return acc;\n                }, []);\n                // console.log(telemetry);\n                $scope.tab4.telemetry = telemetry;\n                $scope.tab4.timeseries = telemetry.reduce( (acc, x) => acc + x.data.length, 0);\n                $scope.tab4.disabled = false;\n                break;\n                \n            // update tab    \n            default:\n                if ($scope.nextTabBtnLabel === \"Exit\") {\n                    $scope.cancel();\n                    return;\n                }\n            \n                $scope.tab4.isReady = false;\n                $scope.nextTabBtnActive = false;\n                const jwt = userService.getJwtToken();\n                \n                const deletesP = $scope.tab4.deletes.map(d => {\n                    const id = $scope.tab4.index[d.label].id;\n                    return deleteTelemetry(jwt, id, d.key, d.ts);\n                });\n                \n                const updatesP = $scope.tab3.onlyDeletes ? \n                    [Promise.resolve()] :\n                    $scope.tab4.telemetry.map(t => uploadTelemetry(t.token, t.data));\n                const p1 = Promise.all(updatesP).then(() => $scope.tab4.updatesDone = true);\n                const p2 = Promise.all(deletesP).then(() => $scope.tab4.deletesDone = true);\n                Promise.all([p1, p2]).then(r => {\n                    $scope.tab4.isReady = true;\n                    $scope.nextTabBtnLabel = \"Exit\";\n                    $scope.nextTabBtnActive = true;\n                    $scope.$apply();\n                });\n                \n                return;\n                \n        }\n        $scope.selectedTab = (currentTab + 1) % 4;\n    };\n    \n    $scope.prevTab = function() {\n        const currentTab = $scope.selectedTab;\n        $scope.selectedTab = (currentTab - 1) % 4;\n    };\n    \n    $scope.$watch('selectedTab', function(newVal, oldVal) {\n        if (newVal < oldVal) {\n            $scope.nextTabBtnActive = true;\n        }\n        if (newVal === 3) {\n            $scope.nextTabBtnLabel = \"Proceed\";\n        }\n        else {\n            $scope.nextTabBtnLabel = \"Next\";\n        }\n    });\n    \n    $scope.allMatched = function() {\n        const someUnmatched = $scope.tab2.devices.some(d => !d.device);\n        if (!someUnmatched) {\n            $scope.nextTabBtnActive = true;\n        } else {\n            $scope.nextTabBtnActive = false;\n        }\n    };\n    \n    tenantDevices(userService.getJwtToken());\n};\n\nself.onDataUpdated = function() {\n\n};\n\nself.onResize = function() {\n    \n};",
    "settingsSchema": "{}",
    "dataKeySettingsSchema": "{}",
    "defaultConfig": "{\"datasources\":[{\"type\":\"static\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"First\",\"color\":\"#2196f3\",\"settings\":{\"showLines\":true,\"fillLines\":true,\"showPoints\":false},\"_hash\":0.8587686344902596,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Second\",\"color\":\"#ffc107\",\"settings\":{\"showLines\":true,\"fillLines\":false,\"showPoints\":false},\"_hash\":0.12775350966079668,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Cos\",\"color\":\"#f44336\",\"settings\":{},\"_hash\":0.24505484152989387,\"funcBody\":\"return Math.round(1000*Math.cos(time/5000));\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#ffc107\",\"settings\":{},\"_hash\":0.3345196917626052,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random 2\",\"color\":\"#607d8b\",\"settings\":{},\"_hash\":0.46269070733358886,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random 3\",\"color\":\"#9c27b0\",\"settings\":{},\"_hash\":0.9122349923444181,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random 4\",\"color\":\"#8bc34a\",\"settings\":{},\"_hash\":0.32095217411843935,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"#9d1f63\",\"color\":\"rgb(255, 255, 255)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Import\",\"dropShadow\":true,\"enableFullscreen\":false,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"mobileHeight\":null,\"showTitleIcon\":false,\"titleIcon\":\"more_horiz\",\"iconColor\":\"rgba(0, 0, 0, 0.87)\",\"iconSize\":\"24px\",\"titleTooltip\":\"\",\"widgetStyle\":{},\"useDashboardTimewindow\":true,\"displayTimewindow\":true,\"showLegend\":false,\"actions\":{}}"
  }
}